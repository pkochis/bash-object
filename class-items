#!/usr/bin/env bash

################################################################################
# Script name: class-items, Version 1.0
# This script is a part of "bash-object" project.
# https://github.com/pkochis/bash-object
# "bash-object" scripts are licensed under the GNU General Public License v3.0
# author: pal@kochis.hu
#
# A) Init and default routines
# B) Delete routine or variable
# C) Add public or private method
# E) Add variable
################################################################################
[[ $(type -t obj) != function ]] && exit  # prevents unwanted run

# A) Init and default routines
objC_Init() { [[ ${FUNCNAME[1]} == objCconstruct ]] && this_DETAILS+=([I]="$1"); }  # add a method name as init method for
objC_NoInit() { [[ ${FUNCNAME[1]} == objCconstruct ]] && unset -v ${this_DETAILS[I]}; }  # delete a method name as init method
objC_Default() { [[ ${FUNCNAME[1]} == objCconstruct ]] && this_DETAILS+=([D]="$1"); }  # add a method name as default method
objC_NoDefault() { [[ ${FUNCNAME[1]} == objCconstruct ]] && unset -v ${this_DETAILS[D]}; }  # delete a method name as default method

# B) Delete routine or variable
objC_DelMethod() { [[ ${FUNCNAME[1]} == objCconstruct ]] && unset -v ${this_DETAILS["P$1"]} ${this_DETAILS["M$1"]}; }  # remove a method
objC_DelVariable() { [[ ${FUNCNAME[1]} == objCconstruct ]] && unset -v ${this_DATA["V$1"]}; }  # remove a variable

# C) Add public or private method
objC_Public() { [[ ${FUNCNAME[1]} == objCconstruct ]] && objC_Private "$@" && this_DETAILS+=(["P$1"]=${this_DETAILS["M$1"]}); }  # add a public method
objC_Private() {
 [[ ${FUNCNAME[1]} != @(objCconstruct||objC_Public) ]] && return  # protect this function
 case $# in
  2) eval "function objR$((++obj_C)) $2"; [[ $(type -t objR${obj_C}) == function ]] && this_DETAILS+=(["M$1"]=${obj_C});;  # add a new method
  3) declare -n ref=obj_DETAILS${objects["ID$2"]:-${objects[ID@]}}; [[ -n ${ref["M$3"]} ]] && this_DETAILS+=(["M$1"]=${ref["M$3"]});;  # add a method from a class
  *) return 1;;
 esac
}  # add a public method

# E) Add variable
objC_Variable() {
 [[ ${FUNCNAME[1]} != objCconstruct ]] && return  # protect this function
 case $# in
  2) this_DATA+=(["V${2%%=*}"]="$1 ${2#*=}");;  # add a new variable (without syntax checking)
  3) declare -n ref=obj_DATA${objects["ID$1"]:-${objects[ID@]}}; [[ -n ${ref["V$2"]} ]] && this_DATA+=(["V$1"]=${ref["V$2"]});;  # add a variable from a class
  *) return 1;;
 esac
}
