#!/usr/bin/env bash

################################################################################
# Script name: basic-classes, Version 1.5
# This script is a part of "bash-object" project.
# https://github.com/pkochis/bash-object
# "bash-object" scripts are licensed under the GNU General Public License v3.0
# author: pal@kochis.hu
#
# A) @obj-debug
# C) @object-list and object-list
# D) @obj-dictionary and obj-error-messages
# E) Change error helper
# F) @obj and --help
# G) @obj-backup-variables
################################################################################
[[ $(type -t objCconstruct) != function ]] && exit  # prevents unwanted load

# A) @obj-debug
((${objects["ID@obj-debug"]:-0} == 0)) && obj @ obj-create @obj-debug \
 objC_Public obj-debug '{ local i
  declare -p obj_details$this obj_data$this; for i in "${!this_data[@]}"; do declare -p objV_${this_data[$i]}; done
 }'

# C) @object-list and object-list
((${objects["ID@object-list"]:-0} == 0)) && obj @ obj-create @object-list \
 objC_Public obj-list '{
  local i; for i in "${!objects[@]}"; do [[ $i == @(ID|ID*\ *) ]] && echo \"${i#ID}\" || { [[ $i == ID* ]] && echo ${i#ID}; }; done
 }' objC_Default obj-list
((${objects["IDobject-list"]:-0} == 0)) && obj @object-list obj-create object-list

# D) @obj-dictionary and obj-error-messages
((${objects["ID@obj-dictionary"]:-0} == 0)) && obj @ obj-create @obj-dictionary \
 objC_Variable -g obj_folder="" \
 objC_Variable -g obj_source_file="" \
 objC_Variable -gA 'obj_dictionary=()' \
 objC_Public translate '{ echo "${obj_dictionary["$1"]:-$1}"; }' \
 objC_Default translate \
 objC_Private obj-add-dictionary '{
  local what=" "; [[ -e $1 ]] && {
   while IFS= read -r; do
    [[ $REPLY == From:\ * ]] && what="${REPLY#From: }"; [[ $REPLY == To:\ * ]] && { obj_dictionary+=(["$what"]="${REPLY#To: }"); what=" "; }
   done < "$1";
  } 
 }' \
 objC_Private obj-add-local-dictionary '{
  [[ -d ${obj_folder} ]] && {
   cd "${obj_folder}"; obj_folder="$PWD"; cd "$OLDPWD"
   objI obj-add-dictionary "$(objRlocalisedFile "${obj_folder}" "${obj_source_file}")"
  } 
 }' \
 objC_Init obj-add-local-dictionary
((${objects["IDobj-error-messages"]:-0} == 0)) && obj @obj-dictionary obj-create obj-error-messages \
 obj_folder="${obj_HOME}" obj_source_file=obj-error
 
# E) Change error helper
objError() { local i c=0 et="$(obj obj-error-messages translate "$1")"; shift; for i in "$@"; do ((c++)); et="${et//%A${c}%/$i}"; done; echo "$et"; }

# F) @obj and --help
((${objects["ID@obj"]:-0} == 0)) && obj @ obj-create @obj objC_Default "--help"
((${objects["ID--help"]:-0} == 0)) && obj @obj obj-create --help

# G) @obj-backup-variables
((${objects["ID@obj-backup-variables"]:-0} == 0)) && obj @ obj-create @obj-backup-variables \
 objC_Variable -g obj_backupfile="" \
 objC_Public obj-restore '{ local i; : ${obj_backupfile:="${PWD}/${this[1]}.bak"}
  [[ -e ${obj_backupfile} ]] && while IFS= read -r; do
   for i in "${!this_data[@]}"; do [[ $REPLY == ${i:1}=* ]] && eval "$REPLY"; done
  done < "${obj_backupfile}"
 }' \
 objC_Public obj-backup '{ local i w; : ${obj_backupfile:="${PWD}/${this[1]}.bak"}
  echo -n "" > "${obj_backupfile}"
  for i in "${!this_data[@]}"; do w="$(declare -p objV_${this_data[$i]})"; echo "${i:1}=${w#*=}" >> "${obj_backupfile}"; done  
 }' \
 objC_Default obj-restore
