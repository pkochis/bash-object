#!/usr/bin/env bash

################################################################################
# Script name: obj-classes  Version 1.5
# This script is a part of "bash-object" project.
# https://github.com/pkochis/bash-object
# "bash-object" scripts are licensed under the GNU General Public License v3.0
# author: pal@kochis.hu
#
# A) @obj@list and object-list
# B) @obj@info
# C) @obj@dictionary and obj-error-messages
# D) Change error helper
# E) @obj@backup-variables
################################################################################
[[ $(type -t objCconstruct) != function ]] && exit  # prevents unwanted load

# A) @obj@list and object-list
((${objects["ID@obj@list"]:-0} == 0)) && obj @obj obj-create @list \
 objC_Public obj-list '{
  local i; for i in "${!objects[@]}"; do [[ $i == @(ID|ID*\ *) ]] && echo \"${i#ID}\" || { [[ $i == ID* ]] && echo ${i#ID}; }; done
 }' objC_Default obj-list
((${objects["IDobject-list"]:-0} == 0)) && obj @obj@list obj-create object-list

# B) @obj@info
((${objects["ID@obj@info"]:-0} == 0)) && obj @obj obj-create @info \
 objC_Public obj-info '{ local i
  echo -e "\nObject: ${this[1]}\nClass:  ${this_details[parent]}\n"
  echo -e "Default method: ${this_details[D]}\nInit method:    ${this_details[I]}"
  echo -en "Help file:      "; [[ -n ${this_details[H]} ]] && echo "${this_details[H]}.help" || echo ""
  echo -e "\nPublic methods:"; for i in "${!this_details[@]}"; do [[ $i == P* ]] && echo " ${i:1} (objR${this_details[$i]})"; done
  echo -e "\nPrivate methods:"; for i in "${!this_details[@]}"; do [[ $i == M* && $i != P* ]] && echo " ${i:1} (objR${this_details[$i]})"; done
  echo -e "\nVariables:"; for i in "${!this_data[@]}"; do echo " ${i:1} (objV_${this_data[$i]})"; done
 }' objC_Default obj-info

# C) @obj@dictionary and obj-error-messages
((${objects["ID@obj@dictionary"]:-0} == 0)) && obj @obj obj-create @dictionary \
 objC_Variable -gA 'obj_dictionary=()' \
 objC_Public translate '{ echo "${obj_dictionary["$1"]:-$1}"; }' \
 objC_Default translate \
 objC_Private obj-add-local-dictionary '{
  local f="$(objRlocalisedFile "$(objRcallerScript)" "${this[1]}.dict")" what=" "; [[ -f $f ]] && {
   while IFS= read -r; do
    [[ $REPLY == From:\ * ]] && what="${REPLY#From: }"; [[ $REPLY == To:\ * ]] && { obj_dictionary+=(["$what"]="${REPLY#To: }"); what=" "; }
   done < "$f";
  } 
 }' \
 objC_Init obj-add-local-dictionary
((${objects["IDobj-error"]:-0} == 0)) && obj @obj@dictionary obj-create obj-error

# D) Change error helper
objError() { local i c=0 et="$(obj obj-error translate "$1")"; shift; for i in "$@"; do ((c++)); et="${et//%A${c}%/$i}"; done; echo "$et"; }

# E) @obj@backup-variables
((${objects["ID@obj@backup-variables"]:-0} == 0)) && obj @obj obj-create @backup-variables \
 objC_Variable -g obj_backupfile="" \
 objC_Public obj-restore '{ local i; : ${obj_backupfile:="$(objRcallerScript)/${this[1]}.bak"}
  [[ -e ${obj_backupfile} ]] && while IFS= read -r; do
   for i in "${!this_data[@]}"; do [[ $REPLY == ${i:1}=* ]] && eval "$REPLY"; done
  done < "${obj_backupfile}"
 }' \
 objC_Public obj-backup '{ local i w; : ${obj_backupfile:="$(objRcallerScript)/${this[1]}.bak"}
  echo -n "" > "${obj_backupfile}"
  for i in "${!this_data[@]}"; do w="$(declare -p objV_${this_data[$i]})"; echo "${i:1}=${w#*=}" >> "${obj_backupfile}"; done  
 }' \
 objC_Public i @obj@info obj-info \
 objC_Default obj-restore \
 objC_Init obj-restore
