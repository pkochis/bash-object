#!/bin/bash

################################################################################
# Script name: init Version 0.7
# This script is a part of "bash-object" project.
# https://github.com/pkochis/bash-object
# "bash-object" scripts are licensed under the GNU General Public License v3.0
# author: pal@kochis.hu
#
# A) Handlers for routines:  objRInsert objRRemove objRCode
# B) Handlers for variables: objVGetAttrib objVariable
# C) Handler for call an object: obj
# D) Object create routine: objR
#   obj-Set:              set reference object
#   obj-Add:              copy all methods and variables from reference object 
#   obj-AddMethods:       add new methods to the new object
#   obj-InsertMethods:    create methods with new names from reference object
#   obj-InsertVariables:  create variables with new names from reference object
#   obj-RemoveMethods:    remove methods from the new object
#   obj-RemoveVariables:  remove variables from the new object
#   obj-AddVariables:     add variables to the new object
# E) Create root object: obj root --init obj-AddMethods ...
#
# Reserved words: obj* this* root
################################################################################
declare -gA objects; [[ -n ${objects["IDroot"]} ]] && exit;  # prevents unwanted load

# A) Handlers for routines
objRInsert() { [[ -n $1 && $1 -gt 0 ]] && ((obj_r[N$1]++)); };
objRRemove() { [[ -n $1 && $1 -gt 0 ]] && ((--obj_r[N$1] < 1)) && unset -v obj_r[N$1] && unset -f objR$1; return 0; };
objRCode() { [[ -n $1 && $1 -gt 0 ]] && declare -gA obj_r && eval function objR$1 "$2" && {
 export -f objR$1 && ((obj_r[N$1] < 1)) && obj_r[N$1]=1; return 0; };
};
export -f objRInsert objRRemove objRCode;

# B) Handlers for variables
objVGetAttrib() { local a; [[ $1 == obj_v ]] && return 1;  # is there pointer to variable?
 a=$(declare -p $1 2> /dev/nul); a="${a#* }" a="${a%% $v*}"; [[ -z $a ]] && return 1;  # is it an existing variable?
 [[ $a != *g* && $2 == -g ]] && echo "${a/--/-}g" || echo "$a";  # must be the variable global?
};
objVariable() { local i && i="obj_v${this_variables["ID$1"]}" && [[ $i != obj_v ]] && echo "$i"; };
export -f objVGetAttrib objVariable;

# C) Handler for call an object
obj() { declare -a this; this=("${objects["ID$1"]}" "$1" "$2"); shift 2;
 declare -n this_methods=obj_methods$this this_variables=obj_variables$this;
 objR${this_methods["R${this[2]}"]} "$@";
}; export -f obj;
declare -grA obj_methods=() obj_variables=();

# D) Object create routine
objR() { [[ -n $this && ${this[2]} != "--init" ]] && return;
 local other it i j; other=0; declare -n other_methods=obj_methods other_variables=obj_variables;
 declare -gA objects && objects["ID${this[1]}"]=$((++obj_C)) this[0]="${obj_C}";  # create object
 declare -gA obj_methods${obj_C} obj_variables${obj_C};  # create data arrays for object
 declare -n this_methods=obj_methods${obj_C} this_variables=obj_variables${obj_C};  # pointers to data arrays
 while (($# > 0)); do
  [[ $1 == obj-* ]] && it="$1" && shift;
  case $it in
   obj-Set) other=${objects["ID$1"]}; declare -n other_methods=obj_methods$other other_variables=obj_variables$other;;
   obj-Add) 
    [[ $other != $this && $1 == methods ]] && { for i in "${!other_methods[@]}"; do
     j=${other_methods["$i"]}; objRRemove "${this_methods["$i"]}"; objRInsert $j && this_methods["$i"]=$j;
    done; };  # methods
    [[ $other != $this && $1 == variables ]] && { for i in "${!other_variables[@]}"; do
     j=${other_variables["$i"]}; local att; att=$(objVGetAttrib "obj_v$j" -g) && {
      unset -v obj_v${this_variables["ID$i"]} && declare $att obj_v$((++obj_C)) && this_variables["$i"]=${obj_C};
     };
    done; };  # variables
   ;;  # obj-GetObjects)
   obj-AddMethods) [[ -n $2 ]] && objRCode $((++obj_C)) "$2" && this_methods["R$1"]=${obj_C} && shift;;
   obj-InsertMethods) [[ -n ${other_methods["R$2"]} && ${this_methods["R$1"]} != ${other_methods["R$2"]} ]] && {
    i="${other_methods["R$2"]}"; objRRemove ${this_methods["R$1"]}; objRInsert $i && this_methods["R$1"]=$i;
   };;  # obj-InsertMethods)
   obj-InsertVariables) i=$(objVGetAttrib obj_v${other_variables["ID$1"]} -g) && [[ -n $1 ]] && {
    unset -v obj_v${this_variables["ID$1"]} && declare $i obj_v$((++obj_C)) && this_variables["ID$1"]=${obj_C};
   };;  # obj-InsertVariables)
   obj-RemoveMethods) objRRemove "${this_methods["R$1"]}" && unset -v this_methods["R$1"];;
   obj-RemoveVariables) [[ -n ${this_variables["ID$1"]} ]] && unset -v obj_v${this_variables["ID$1"]} this_variables["ID$1"];;
   obj-AddVariables) [[ -n $1 && -n $2 ]] && {
    unset -v obj_v${this_variables["ID$2"]} && declare $1 obj_v$((++obj_C)) && this_variables["ID$2"]="${obj_C}" && shift;
   };;  # obj-AddVariables)
  esac;  # case $it in
  shift;
 done;  # while (($# > 1))
}; export -f objR;

# E) Create root object 
obj root --init \
 obj-AddMethods \
  --list-objects '{ local i; for i in "${!objects[@]}"; do echo "  \"${i#ID}\""; done; }' \
  --list-methods '{ local i; for i in "${!this_methods[@]}"; do echo "  \"${i#R}\""; done; }' \
  --list-variables '{ local i; for i in "${!this_variables[@]}"; do echo -e "  $(objVGetAttrib obj_v${this_variables["$i"]} -g)\t\"${i#ID}\""; done; }' \
  --destroy '{
   for i in "${this_variables[@]}"; do unset -v obj_v$i; done; for i in "${this_methods[@]}"; do objRRemove $i; done; 
   unset -v this_variables this_methods objects["ID${this[1]}"];
  }';  # root object is ready
