#!/usr/bin/env bash

################################################################################
# Script name: init  Version 1.5.0.1
# This script is a part of "bash-object" project.
# https://github.com/pkochis/bash-object
# "bash-object" scripts are licensed under the GNU General Public License v3.0
# author: pal@kochis.hu
#
# A) Set environment
# B) Message handlers
# C) Basic named routines
# D) Create class
# E) Create object
# F) @obj class and --help object; call the creator script for @obj classes
################################################################################
[[ $(type -t obj) != function || ! -e ${obj_HOME}/class-items ]] && exit  # prevents unwanted run

# A) Set environment
source ${obj_HOME}/class-items  # include the details of class creation
declare -g obj_C; ((obj_C < 10)) && obj_C=12; export obj_C  # init general upcounter
declare -gA objects; objects+=([ID@]=1 [ID]=2)  # init the registers of objects/classes; register root class and reset object
declare -gA obj_DETAILS1=() obj_DATA1=() obj_details1=(["Pobj-create"]=create ["Mobj-create"]=create) obj_data1=()  # root class
declare -gA obj_details2=([D]=restart [Prestart]=restart [Mrestart]=restart) obj_data2=()  # special for restart bash-object

# B) Message handlers
objError() { local i c=0 et="$1"; shift; for i in "$@"; do ((c++)); et="${et//%A${c}%/$i}"; done; echo "$et"; }
obj() {
 declare -a this=(${objects["ID${1}"]:-0} "$1" "$2" "$2" "$2"); shift; shift  # get ID of object/class
 if ((this > 0)); then
  declare -n this_details=obj_details$this this_data=obj_data$this  # load object/class
  local i; for i in "${!this_data[@]}"; do declare -n ${i:1}=objV_${this_data[$i]}; done  # attach variables
  objR${this_details["P${this[2]}"]:-default} "$@"  # run a public method of the object/class
 elif ((${#objects[@]} > 0)); then
  objError "The %A1% object/class does not exist" "\"${this[1]}\""  # the object/class is missing
 else
  objRrestart "${this[1]}" "${this[2]}" "$@"  # the bash-object runs in subshell
 fi
}
objRdefault() {
 [[ ${FUNCNAME[1]} != obj ]] && return  # protect this function
 if [[ -z "${this_details[D]}" ]]; then objRnoPublicMethod
 else this[2]="${this_details[D]}" this[3]="${this_details[D]}"; objR${this_details["P${this_details[D]}"]:-noPublicMethod} "${this[4]}" "$@"  # runs the public default method
 fi
}
objRnoPublicMethod() { objError "The %A1% public method in %A2% object/class does not exist" "\"${this[2]}\"" "\"${this[1]}\""; }
objI() { ((${this:-0} < 1)) && return; this[3]="$1" this[4]="$1"; shift; objR${this_details["M${this[3]}"]:-noMethod} "$@"; }
objRnoMethod() { objError "The %A1% method in %A2% object/class does not exist" "\"${this[3]}\"" "\"${this[1]}\""; }
export -f obj

# C) Basic named routines
objRcreate() {
 [[ ${FUNCNAME[1]} != obj ]] && return  # protect this function
 declare -a THIS=("${this[@]}"); declare -n THIS_details=obj_details$THIS THIS_data=obj_data$THIS THIS_DETAILS=obj_DETAILS$THIS THIS_DATA=obj_DATA$THIS
 declare -a this=(0 "$1"); shift  # switch to new class/object
 [[ ${this[1]} == @* && ${THIS[1]} != "@" ]] && this[1]="${THIS[1]}${this[1]}"  # construct class/object name
 ((${objects["ID${this[1]}"]:-0} > 0)) && { objError "The %A1% object/class is already exists" "\"${this[1]}\""; return; }
 this=$((++obj_C)); objects+=(["ID${this[1]}"]=$this)  # create new class/object
 declare -gA "obj_details$this=()" "obj_data$this=()"  # init new class/object
 declare -n this_details=obj_details$this this_data=obj_data$this; this_details+=([parent]="${THIS[1]}")  # load new class/object
 if [[ ${this[1]} == @* ]]; then objCconstruct : "$@" objC_; else objOconstruct "$@"; fi  # call class/object contructor
}
objRdeconstruct() {
 for i in "${this_data[@]}"; do unset -v objV_${i:1}; done  # remove variables
 unset -v obj_details$this obj_data$this objects["ID${this[1]}"]  # remove object
}
objRrunHelp() {
 [[ -n $1 ]] && local h="${this_details[H]}.$1" || local h="${this_details[H]}"  # construct help file name
 [[ -e $h.help ]] && source "$h.help" || objError "The %A1% help for %A2% object/class does not exist" "\"$h\"" "\"${this[1]}\""
}
objRlocalisedFile() {
 local language="${3:-${LANG:-${LC_CTYPE:-en}}}" ret=""
 (($# > 1)) && {
  [[ -e $1/locale/en/$2 ]] && ret="$1/locale/en/$2"
  [[ -e $1/locale/${language%%_*}/$2 ]] && ret="$1/locale/${language%%_*}/$2"
  }
 [[ -n $ret ]] && cd "${ret%/*}" && echo "${PWD}/${ret##*/}"; cd "$OLDPWD"
}

# D) Create class
objCconstruct() {
 [[ ${FUNCNAME[1]} != objRcreate ]] && return; local i j=""; declare -a cline=() # protect this function
 declare -gA "obj_DETAILS$this=()" "obj_DATA$this=()"  # init new class
 declare -n this_DETAILS=obj_DETAILS$this this_DATA=obj_DATA$this  # load new class
 for i in "${!THIS_DETAILS[@]}"; do this_DETAILS+=([$i]="${THIS_DETAILS[$i]}"); done  # copy methods, public methods
 for i in "${!THIS_DATA[@]}"; do this_DATA+=([$i]="${THIS_DATA[$i]}"); done  # copy variables
 for i in "$@"; do [[ $i == objC_* ]] && { "${cline[@]}"; cline=(); }; cline+=("$i"); done  # run the class modify routines
 j="$(objRlocalisedFile "$(objRcallerScript)" "${this[1]}.help")"
 [[ -f $j ]] && this_details+=([H]="${j%.help}" ["M--help"]=runHelp ["P--help"]=runHelp)  # add help
 this_details+=(["Mobj-create"]=create ["Pobj-create"]=create)  # add create method
}

# E) Create object
objOconstruct() {
 [[ ${FUNCNAME[1]} != objRcreate ]] && return; local i v  # protect this function
 for i in "${!THIS_DETAILS[@]}"; do this_details+=([$i]="${THIS_DETAILS[$i]}"); done  # copy methods, public methods and helpfile
 for i in "${!THIS_DATA[@]}"; do  # create variables BEGIN
  eval "declare ${THIS_DATA[${i}]%% *} objV_$((++obj_C))=${THIS_DATA[${i}]#* }"; this_data+=([$i]=${obj_C})
 done  # create variables END
 for i in "${!this_data[@]}"; do declare -n ${i:1}=objV_${this_data[$i]}; done  # attach variables
 for i in "$@"; do v="${i%%=*}"  # set variables BEGIN
  [[ $v == *\+ ]] && declare -g "objV_${this_data[V${v%%+}]:-0}+=${i#*=}" || declare -g "objV_${this_data[V${v}]:-0}=${i#*=}"; unset -v objV_0
 done  # set variables END
 [[ -n ${THIS_DETAILS[I]} ]] && objI "${THIS_DETAILS[I]}"  # run init method
 [[ -e ${THIS_details[H]}.help ]] && { this_details+=([H]="${THIS_details[H]}"); this_details+=(["M--help"]=runHelp ["P--help"]=runHelp); }  # add help method
 this_details+=(["Mobj-erase"]=deconstruct ["Pobj-erase"]=deconstruct)  # add erase method
}

((${objects["ID@obj"]:-0} == 0)) && obj @ obj-create @obj objC_Default "--help"
((${objects["ID--help"]:-0} == 0)) && obj @obj obj-create --help
source "${obj_HOME}/obj-classes"
