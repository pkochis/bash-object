#!/usr/bin/env bash

################################################################################
# English help file: @obj.create.help  Version 1.5
# This file is made for the "bash-object" project.
# https://github.com/pkochis/bash-object
# "bash-object" scripts are licensed under the GNU General Public License v3.0
# author: pal@kochis.hu
################################################################################
[[ "${this[1]}" == "--help" ]] && printf "
Inheritance:
 obj @<class> obj-create @<new class> [expression]...

Expression format: <keyword> [parameters]

Keywords:
 objC_Default <public method>  Marks a public method as default
 objC_NoDefault                Does not mark a method as default
 objC_Init <method>            Executes the method at the end of construction
 objC_NoInit                   Does not execute an initializing method
 objC_DelMethod <metode>       Deletes the method
 objC_DelVariable <variable>   Deletes the variable
 objC_Public <pattern>         Creates a public method
 objC_Private <pattern>        Creates a private method
 objC_Variable <pattern>       Creates a new variable or an existing variable
                               modifies the value of an existing variable

Notes:
 a) Expressions are evaluated at inheritance time, after the class has copied
    the inactive methods and variables stored in it. Expressions are only used
    during inheritance.
 b) The expressions modify the inactive methods and variables stored
    in the new class, but do not affect the class's own active methods.
 c) Expressions are used to set the behaviour of objects after construction.
 d) Each expression affects only one method or variable. For a new method,
    or variable, a new expression must be written.
 e) Each keyword starts with \"objC_\".
 f) The method set by objC_Default is searched for by the obj command,
    if no public method is found in the message.
 g) When creating (or overwriting) a method, two patterns may be used:
    1) To create a new method: <method> '{ code; }'
    2) To copy an existing method: <method> @<class> <method>
 h) When creating (or overwriting) a variable, two types of patterns
    can be used:
    1) <attribute> <variable>=<value>
    2) To copy an existing variable: <variable> @<class> <variable>
 i) The <variable>=<value> expression must be passed to the constructor as a single
    expression, so:
      <variable>='<value>'              or  <variable>='<value>'
      '<array>=(<list item>...)'        or  '<array>=(<list item>...)\'
      '<array>=([<index>]=<value>...)'  or  \"<array>=([<index>]=<value>...)\"
 j) In case of name conflicts of methods and variables, the older information
    are overwritten.   
 k) The names of the variables must follow the naming conventions
    for bash variables.
 l) With some exceptions, method and object names may contain special
    characters. Spaces should be protected by quotation marks or backslashes.
"
